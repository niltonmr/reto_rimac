service: reto-rimac

frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  profile: deploy-aws
  region: us-east-1
  lambdaHashingVersion: 20201221
  environment:
    CLIENT_TABLE: ${self:service}-${opt:stage, self:provider.stage}

  iam:
    role:
      statements:  
        - Effect: Allow
          Action:
            - dynamodb:*
            - s3:*
            - ses:*
          Resource: '*'

plugins:
    - serverless-webpack
    - serverless-offline
    - serverless-dynamodb-local

package:
    individually: true

custom:
    tableName: abcde
    bucketName: reto-rimac-devserverlessprojectuploadbucket
    dynamodb:
        stages:
            - dev
        start:
            port: 8000
            inMemory: true
            migrate: true
        migration:
            dir: offline/migrations

functions:
  onePeople:
    handler: api/swapi/swapi.getOnePeople
    events:
      - http:
          method: get
          path: /api/people/{id}
          cors: true

  allPeople:
    handler: api/swapi/swapi.getAllPeople
    events:
      - http:
          method: get
          path: /api/people
          cors: true

  oneVehicle:
    handler: api/swapi/swapi.getOneVehicle
    events:
      - http:
          method: get
          path: /api/vehicle/{id}
          cors: true

  allVehicles:
    handler: api/swapi/swapi.getAllVehicles
    events:
      - http:
          method: get
          path: /api/vehicles
          cors: true

  putClient:
    handler: api/dynamodb/cliapi.putClient
    events:
      - http:
          path: /api/putclient
          method: post
          cors: true

  getClient:
    handler: api/dynamodb/cliapi.getClient
    events:
      - http:
          path: /api/getClient/{id}
          method: get
          cors: true


resources:
  Resources:
    DemoBucketUpload:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketName}
    MyDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1


